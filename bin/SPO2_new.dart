import 'package:scidart/numdart.dart';
import 'package:scidart/scidart.dart';
import 'package:linalg/linalg.dart';
import 'dart:math';

class SgFilter {
  int _order;
  int _frameLength;
  int _size;
  Matrix _kernel;

  /// The constructor for SgFilter
  /// Arguments:
  ///   - _order: int, the order of polynomial.
  ///   - _frameLength: int, the windows size for smoothing.
  /// Return:
  ///   - SgFilter
  SgFilter(this._order, this._frameLength) {
    _size = _frameLength ~/ 2;
    _kernel = this._buildKernel();
  }

  /// Build the kernel for smoothing
  /// Arguments:
  ///   - void
  /// Return:
  ///   - Matrix: the kernel for smoothing
  Matrix _buildKernel() {
    List<double> baseSeq = [];
    List<List<double>> tempMatrix = [];
    Matrix matrix;
    Matrix kernel;

    // construct base sequence
    for (int i = -_size; i <= _size; i++) {
      baseSeq.add(i.toDouble());
    }

    // fill the tempMatrix
    for (int i = 0; i < _order; i++) {
      List<double> tempSeq = [];

      // make row
      for (double val in baseSeq) {
        tempSeq.add(pow(val, i));
      }

      // add row
      tempMatrix.add(tempSeq);
    }

    // convert List<List<double>> to Matrix
    matrix = new Matrix(tempMatrix).transpose();

    // Calculate the kernel
    kernel =
        matrix * (matrix.transpose() * matrix).inverse() * matrix.transpose();

    return kernel;
  }

  /// Smooth given data
  /// Arguments:
  ///   - x: List<dynamic>, input data, only support int/double type.
  /// Return:
  ///   - List<dynamic>: Data after smoothing
  /// Throws:
  ///   - FormatException:
  ///      - if the data type is neither int nor double.
  ///      - Or the input length < _frameLength
  List<dynamic> smooth(List<dynamic> x) {
    List<double> dataAfterSmooth = [];
    List<double> inputData = [];

    // validate input data
    if (x.length < _frameLength) {
      throw FormatException(
          "The length of input must be >= _frameLength. (_frameLength=$_frameLength; input=${x.length})");
    }
    if (x[0].runtimeType != 0.runtimeType &&
        x[0].runtimeType != 1.0.runtimeType) {
      throw FormatException(
          "Only support int/double, get: ${x[0].runtimeType}!");
    }

    // convert List<int> to List<double> if needed
    if (x[0].runtimeType == 0.runtimeType) {
      for (int val in x) {
        inputData.add(val * 1.0);
      }
    } else {
      inputData = x;
    }

    // add padding
    // adding padding in the front
    for (int i = 0; i < _size; i++) {
      inputData.insert(0, 1);
    }

    // adding padding at the end
    for (int i = 0; i < _size; i++) {
      inputData.add(1);
    }

    // smoothing input data
    for (int i = _size; i < inputData.length - _size; i++) {
      List<List<double>> tempWin = [
        inputData.sublist(i - _size, i + _size + 1)
      ];
      Matrix windowX = new Matrix(tempWin).transpose();
      dataAfterSmooth.add((_kernel * windowX)[_size][0]);
    }

    return dataAfterSmooth;
  }

  /// getters
  int get order {
    return _order;
  }

  int get frameLength {
    return _frameLength;
  }

  Matrix get kernel {
    return _kernel;
  }
}

List linear_interp(double x1, double y1, double x2, double y2) {
  if (x1 > x2) {
    // keep x1 smaller than x2.
    var t;
    t = x1;
    x1 = x2;
    x2 = t;

    t = y1;
    y1 = y2;
    y2 = t;
  }
  var N = x2 - x1;
  var x;
  var y;
  Array result_y = Array.empty(); //
  for (int i = 0; i < N; i++) {
    x = x1 + i;
    y = (x - x1) * (y2 - y1) / (x2 - x1) + y1;
    result_y.add(y);
  }
  return result_y;
} //

List findtopPeaks(Array a, {double mindistance}) {
  //modify from scidart.findPeaks
  var N = a.length - 2;
  Array ix = Array.empty(); //ix -- index
  Array ax = Array.empty(); // ax -- value
  ix.add(0);
  ax.add(0);
  if (mindistance != null) {
    for (int i = 1; i <= N; i++) {
      if (a[i - 1] <= a[i] && a[i] >= a[i + 1]) {
        if (i - ix.last > mindistance) {
          //mindistance between two peaks
          ix.add(i.toDouble());
          ax.add(a[i]);
        }
      }
    }
  } else {
    for (int i = 1; i <= N; i++) {
      if (a[i - 1] <= a[i] && a[i] >= a[i + 1]) {
        ix.add(i.toDouble());
        ax.add(a[i]);
      }
    }
  }
  ix.remove(0);
  ax.remove(0);
  return [ix, ax];
}

List findlowtroughs(Array a, {double mindistance}) {
  //modify from scidart.findPeaks
  var N = a.length - 2;
  Array ix = Array.empty(); //ix -- index
  Array ax = Array.empty(); // ax -- value
  ix.add(0);
  ax.add(0);
  if (mindistance != null) {
    for (int i = 1; i <= N; i++) {
      if (a[i - 1] >= a[i] && a[i] <= a[i + 1]) {
        if (i - ix.last > mindistance) {
          //mindistance between two peaks
          ix.add(i.toDouble());
          ax.add(a[i]);
        }
      }
    }
  } else {
    for (int i = 1; i <= N; i++) {
      if (a[i - 1] >= a[i] && a[i] <= a[i + 1]) {
        ix.add(i.toDouble());
        ax.add(a[i]);
      }
    }
  }
  ix.remove(0);
  ax.remove(0);
  return [ix, ax];
}

void main() {
  // load RED data
  var sg_IR = Array([
    3968,
    3882,
    3971,
    3981,
    3974,
    3970,
    3976,
    3950,
    3967,
    3960,
    3962,
    3967,
    3962,
    3977,
    3978,
    3968,
    3971,
    4088,
    3973,
    3959,
    4053,
    3959,
    3961,
    3975,
    3975,
    3967,
    3970,
    3974,
    3982,
    3939,
    3962,
    3969,
    3977,
    3973,
    3972,
    4044,
    3965,
    3969,
    3973,
    4020,
    3949,
    3949,
    4078,
    3953,
    3955,
    4032,
    3963,
    3954,
    3949,
    3969,
    3977,
    3989,
    3965,
    3964,
    3972,
    3874,
    3951,
    3952,
    3975,
    3976,
    3979,
    3957,
    3969,
    3956,
    3864,
    3949,
    3955,
    3967,
    3966,
    3953,
    4003,
    3971,
    3962,
    3955,
    3997,
    3967,
    3954,
    3957,
    3950,
    3974,
    3965,
    3964,
    3980,
    4032,
    3962,
    3979,
    3975,
    3952,
    3968,
    4013,
    3967,
    3962,
    3927,
    3973,
    3953,
    4003,
    3967,
    3957,
    3975,
    4012,
    3949,
    4108,
    4041,
    3953,
    3975,
    4043,
    3978,
    3963,
    3964,
    4050,
    3965,
    3964,
    4024,
    3968,
    3961,
    3961,
    3854,
    3972,
    3964,
    3962,
    3956,
    3955,
    3963,
    3966,
    3964,
    3954,
    3875,
    3965,
    3961,
    3967,
    3972,
    3949,
    3966,
    3974,
    3962,
    3966,
    3975,
    3959,
    3952,
    3960,
    3967,
    3961,
    3967,
    3955,
    3961,
    3962,
    3949,
    4045,
    3976,
    3967,
    3963,
    3962,
    3952,
    3972,
    3950,
    3960,
    4021,
    3963,
    3970,
    3961,
    3950,
    3974,
    4032,
    3952,
    3958,
    3965,
    4026,
    3951,
    3959,
    3966,
    3955,
    3945,
    4057,
    3962,
    3957,
    4025,
    3961,
    3961,
    4017,
    3984,
    3959,
    3955,
    3947,
    3961,
    3957,
    3958,
    3944,
    3856,
    3964,
    3948,
    3854,
    3944,
    3962,
    3946,
    3962,
    3960,
    3944,
    3950,
    3963,
    3959,
    3976,
    3957,
    3959,
    3956,
    3953,
    3961,
    4059,
    3967,
    3952,
    3956,
    4048,
    3961,
    3956,
    3948,
    3960,
    3957,
    3960,
    3955,
    3953,
    3985,
    3982,
    3926,
    3953,
    3964,
    3933,
    3929,
    3942,
    3979,
    3948,
    3951,
    4032,
    3939,
    3950,
    4049,
    3942,
    3962,
    4034,
    3952,
    3956,
    4019,
    3968,
    3953,
    3937,
    3983,
    3938,
    3935,
    3945,
    3988,
    3953,
    3929,
    3952,
    3948,
    3948,
    3954,
    3940,
    3949,
    3954,
    3956,
    3828,
    3932,
    3954,
    3858,
    3931,
    3945,
    3945,
    3948,
    3953,
    3958,
    3893,
    3939,
    3930,
    3952,
    3967,
    3936,
    3939,
    3952,
    4044,
    3937,
    4029,
    3947,
    3942,
    4017,
    3947,
    3947,
    3944,
    3953,
    3943,
    3938,
    3954,
    3934,
    3932,
    3941,
    3932,
    3948,
    3993,
    3948,
    3940,
    4024,
    3933,
    3946,
    4025,
    3939,
    3938,
    4055,
    3948,
    3944,
    3956,
    4017,
    3956,
    3949,
    3974,
    3949,
    3940,
    3904,
    3946,
    3940,
    3942,
    3883,
    3952,
    3941,
    3928,
    3935,
    3936,
    3944,
    3865,
    3932,
    3937,
    3947,
    3853,
    3945,
    3947,
    3941,
    3938,
    3940,
    3939,
    3941,
    3934,
    3950,
    3955,
    3941,
    3952,
    3950,
    3954,
    3954,
    3938,
    4030,
    3950,
    3942,
    3946,
    4015,
    3940,
    3956,
    3947,
    3935,
    3950,
    3941,
    3984,
    3941,
    3956,
    3944,
    3947,
    3941,
    3941,
    3944,
    3944,
    3941,
    3944,
    3938,
    4032,
    4028,
    3958,
    3952,
    4069,
    3943,
    3944,
    3952,
    4056,
    3945,
    3940,
    4013,
    4014,
    3943,
    3935,
    3949,
    3951,
    3952,
    3955,
    3957,
    3935,
    3903,
    3946,
    3949,
    3939,
    3850,
    3953,
    3940,
    3947,
    3956,
    3927,
    3943,
    3871,
    3951,
    3944,
    3943,
    3836,
    3946,
    3936,
    3954,
    3951,
    3946,
    3948,
    3901,
    3945,
    3943,
    3940,
    3970,
    3946,
    3952,
    3951,
    3944,
    3943,
    3935,
    4019,
    3936,
    3927,
    3939,
    4002,
    3953,
    3952,
    3991,
    3945,
    3941,
    3942,
    3940,
    3951,
    3940,
    3964,
    3939,
    3945,
    3984,
    3916,
    3957,
    3950,
    4016,
    3943,
    3938,
    3948,
    4037,
    3945,
    4043,
    3938,
    3937,
    3949,
    4024,
    3944,
    3933,
    3949,
    4007,
    3948,
    3975,
    3936,
    3946,
    3932,
    3841,
    3934,
    3939,
    3842,
    3957,
    3942,
    3840,
    3944,
    3943,
    3932,
    3854,
    3956,
    3945,
    3940,
    3924,
    3931,
    3937,
    3953,
    3939,
    3952,
    3934,
    4019,
    3937,
    3942,
    3931,
    3944,
    3928,
    3933,
    3986,
    3941,
    3947,
    3965,
    3942,
    3942,
    3946,
    3941,
    3936,
    3915,
    3940,
    3934,
    3971,
    3946,
    3939,
    3941,
    4006,
    3935,
    3941,
    3964,
    3946,
    3940,
    4059,
    4083,
    3942,
    3943,
    4004,
    3938,
    3946,
    3936,
    3965,
    3950,
    3986,
    3972,
    3935,
    3937,
    3845,
    3949,
    3929,
    3930,
    3947,
    3938,
    3839,
    3937,
    3927,
    3828,
    3939,
    3943,
    3942,
    3945,
    3938,
    3936,
    3957,
    3936,
    3922,
    3960,
    3928,
    3936,
    3952,
    3946,
    3952,
    3936,
    4042,
    3942,
    3938,
    3979,
    3935,
    3937,
    3934,
    3941,
    3935,
    3938,
    3939,
    3935,
    3944,
    3945,
    3937,
    3969,
    3938,
    3938,
    3944,
    3997,
    3938,
    4066,
    4028,
    3938,
    3940,
    4044,
    3921,
    3940,
    4054,
    3934,
    3947,
    4004,
    3948,
    3947,
    3899,
    3948,
    3932,
    3934,
    3947,
    3943,
    3941,
    3945,
    3935,
    3935,
    3933,
    3813,
    3944,
    3933,
    3931,
    3941,
    3934,
    3939,
    3936,
    3938,
    3934,
    3943,
    3942,
    3929,
    3950,
    3949,
    3938,
    3934,
    3948,
    3934,
    3931,
    4002,
    3933,
    3938,
    3926,
    3946,
    3944,
    3929,
    3944,
    3940,
    3937,
    4038,
    3949,
    3930,
    3912,
    3980,
    3940,
    3942,
    3982,
    3941,
    3947,
    3937,
    4051,
    3939,
    3955,
    4085,
    4062,
    3933,
    3942,
    4030,
    3941,
    3937,
    3928,
    3985,
    3932,
    3931,
    3908,
    3968,
    3937,
    3940,
    3934,
    3943,
    3938,
    3939,
    3931,
    3933,
    3938,
    3830,
    3951,
    3940,
    3871,
    3930,
    3938,
    3956,
    3943,
    3946,
    3936,
    3930,
    3948,
    3949,
    3969,
    3936,
    3928,
    3939,
    3943,
    3930,
    3933,
    4047,
    3932,
    3923,
    3931,
    3982,
    3940,
    3953,
    3947,
    3944,
    3941,
    3903,
    3932,
    3929,
    4004,
    3936,
    3924,
    3934,
    3946,
    3923,
    4047,
    3934,
    3944,
    4049,
    4023,
    3931,
    3933,
    3940,
    3937,
    3933,
    4056,
    3930,
    3928,
    3946,
    3987,
    3942,
    3972,
    3939,
    3942,
    3939,
    3920,
    3937,
    3935,
    3861,
    3935,
    3931,
    3859,
    3935,
    3934,
    3926,
    3918,
    3934,
    3943,
    3850,
    3927,
    3939,
    3913,
    3939,
    3936,
    3936,
    3933,
    3932,
    3920,
    3935,
    3914,
    3922,
    4029,
    3929,
    3931,
    3934,
    3934,
    3938,
    3940,
    4036,
    3940,
    3935,
    3929,
    3958,
    3943,
    3939,
    3934,
    3951,
    3923,
    3936,
    3946,
    3943,
    3925,
    3976,
    3939,
    3934,
    4011,
    3927,
    3938,
    3933,
    4066,
    3940,
    3937,
    3939,
    4078,
    3923,
    3931,
    3973,
    3938,
    3954,
    3931,
    4004,
    3941,
    3938,
    3936,
    3927,
    3923,
    3930,
    3847,
    3933,
    3926,
    3945,
    3856,
    3945,
    3935,
    3940,
    3937,
    3939,
    3936,
    3845,
    3936,
    3942,
    3936,
    3928,
    3932,
    3938,
    3937,
    3923,
    3942,
    3928,
    3930,
    3988,
    3935,
    3926,
    3942,
    4050,
    3929,
    3936,
    3953,
    3930,
    3931,
    3933,
    3985,
    3941,
    3931,
    3984,
    3924,
    3932,
    3919,
    3942,
    3928,
    3932,
    3935,
    3946,
    3939,
    3981,
    4009,
    3933,
    3939,
    4030,
    3942,
    3941,
    4052,
    3937,
    3943,
    4027,
    3948,
    3928,
    3936,
    3961,
    3989,
    3942,
    3928,
    4003,
    3929,
    3955,
    3946,
    3931,
    3935,
    3939,
    3852,
    3927,
    3938,
    3935,
    3933,
    3941,
    3931,
    3945,
    3853,
    3933,
    3935,
    3942,
    3863,
    3934,
    3933,
    3943,
    3936,
    3937,
    3938,
    3942,
    3935,
    3944,
    3926,
    3979,
    3928,
    3936,
    3928,
    3931,
    3938,
    3936,
    4039,
    3942,
    3930,
    3975,
    3939,
    3927,
    3934,
    3934,
    3944,
    3926,
    3981,
    3944,
    3932,
    3943,
    4017,
    3935,
    3943,
    3960,
    3939,
    3927,
    3935,
    3997,
    3933,
    3942,
    3939,
    3971,
    3940,
    3927,
    4054,
    3935,
    3931,
    3946,
    4006,
    3938,
    3929,
    3934,
    3968,
    3934,
    3932,
    3929,
    3913,
    3937,
    3876,
    3925,
    3931,
    3929,
    3925,
    3938,
    3938,
    3937,
    3934,
    3930,
    3855,
    3946,
    3942,
    3931,
    3941,
    3925,
    3933,
    3904,
    3921,
    3931,
    3936,
    3936,
    3923,
    3921,
    3939,
    3944,
    3929,
    3932,
    4009,
    3923,
    3944,
    3923,
    4015,
    3931,
    3941,
    3933,
    3928,
    3923,
    3997,
    3922,
    3923,
    3931,
    3961,
    3937,
    3926,
    3969,
    3945,
    3922,
    3940,
    4027,
    3933,
    3971,
    3938,
    3924,
    4037,
    3941,
    3914,
    3957,
    3933,
    3932,
    3974,
    3971,
  ]);
  var sg_RED = Array([
    6854,
    6925,
    6845,
    6850,
    6837,
    6835,
    6852,
    6841,
    6835,
    6844,
    6906,
    6855,
    6842,
    6851,
    6852,
    6844,
    6849,
    6845,
    6847,
    6845,
    6837,
    6843,
    6856,
    6826,
    6836,
    6857,
    6847,
    6847,
    6841,
    6852,
    6842,
    6840,
    6846,
    6859,
    6838,
    6937,
    6838,
    6841,
    6851,
    6856,
    6804,
    6809,
    6903,
    6823,
    6816,
    6894,
    6808,
    6817,
    6812,
    6771,
    6851,
    6846,
    6846,
    6847,
    6841,
    6864,
    6824,
    6834,
    6843,
    6834,
    6847,
    6829,
    6821,
    6837,
    6958,
    6821,
    6819,
    6828,
    6832,
    6827,
    6854,
    6828,
    6840,
    6827,
    6838,
    6833,
    6832,
    6837,
    6812,
    6825,
    6821,
    6831,
    6833,
    6834,
    6837,
    6840,
    6836,
    6824,
    6844,
    6829,
    6832,
    6837,
    6836,
    6846,
    6828,
    6858,
    6825,
    6816,
    6823,
    6839,
    6826,
    6899,
    6840,
    6827,
    6823,
    6893,
    6833,
    6835,
    6827,
    6835,
    6833,
    6838,
    6870,
    6839,
    6829,
    6820,
    6859,
    6823,
    6831,
    6824,
    6825,
    6817,
    6826,
    6830,
    6829,
    6832,
    6888,
    6840,
    6825,
    6828,
    6824,
    6824,
    6829,
    6837,
    6830,
    6844,
    6815,
    6814,
    6826,
    6829,
    6821,
    6837,
    6834,
    6830,
    6819,
    6818,
    6824,
    6819,
    6829,
    6835,
    6824,
    6823,
    6837,
    6824,
    6818,
    6854,
    6826,
    6822,
    6828,
    6829,
    6822,
    6828,
    6912,
    6822,
    6823,
    6815,
    6827,
    6810,
    6825,
    6832,
    6818,
    6814,
    6855,
    6820,
    6821,
    6820,
    6820,
    6818,
    6826,
    6825,
    6821,
    6814,
    6809,
    6835,
    6816,
    6828,
    6819,
    6889,
    6828,
    6810,
    6929,
    6827,
    6830,
    6841,
    6830,
    6827,
    6856,
    6812,
    6821,
    6825,
    6831,
    6821,
    6821,
    6817,
    6836,
    6821,
    6817,
    6821,
    6821,
    6802,
    6815,
    6814,
    6822,
    6822,
    6809,
    6827,
    6829,
    6825,
    6809,
    6865,
    6831,
    6770,
    6811,
    6840,
    6786,
    6794,
    6809,
    6794,
    6802,
    6796,
    6900,
    6797,
    6800,
    6893,
    6788,
    6808,
    6794,
    6795,
    6806,
    6846,
    6758,
    6827,
    6773,
    6833,
    6782,
    6798,
    6792,
    6791,
    6797,
    6763,
    6798,
    6778,
    6803,
    6797,
    6792,
    6824,
    6803,
    6801,
    6849,
    6766,
    6813,
    6950,
    6787,
    6793,
    6802,
    6788,
    6797,
    6791,
    6799,
    6793,
    6801,
    6798,
    6792,
    6792,
    6805,
    6795,
    6797,
    6778,
    6793,
    6800,
    6801,
    6790,
    6788,
    6797,
    6794,
    6793,
    6781,
    6784,
    6787,
    6777,
    6783,
    6780,
    6796,
    6806,
    6819,
    6799,
    6804,
    6806,
    6784,
    6797,
    6800,
    6798,
    6800,
    6851,
    6803,
    6789,
    6791,
    6852,
    6782,
    6790,
    6806,
    6800,
    6792,
    6804,
    6787,
    6792,
    6797,
    6834,
    6799,
    6801,
    6796,
    6791,
    6796,
    6805,
    6889,
    6802,
    6811,
    6800,
    6921,
    6799,
    6780,
    6797,
    6804,
    6796,
    6847,
    6798,
    6796,
    6791,
    6806,
    6786,
    6794,
    6794,
    6796,
    6797,
    6805,
    6795,
    6789,
    6813,
    6793,
    6789,
    6780,
    6797,
    6795,
    6804,
    6796,
    6787,
    6803,
    6813,
    6799,
    6795,
    6798,
    6805,
    6787,
    6788,
    6816,
    6802,
    6791,
    6803,
    6881,
    6792,
    6802,
    6790,
    6876,
    6782,
    6798,
    6786,
    6840,
    6780,
    6791,
    6813,
    6788,
    6801,
    6790,
    6773,
    6806,
    6796,
    6791,
    6798,
    6794,
    6798,
    6782,
    6788,
    6787,
    6835,
    6790,
    6784,
    6791,
    6791,
    6781,
    6795,
    6908,
    6800,
    6789,
    6802,
    6913,
    6803,
    6780,
    6792,
    6789,
    6795,
    6798,
    6853,
    6806,
    6801,
    6783,
    6795,
    6786,
    6797,
    6792,
    6793,
    6778,
    6800,
    6801,
    6790,
    6797,
    6797,
    6795,
    6798,
    6792,
    6782,
    6799,
    6793,
    6795,
    6798,
    6797,
    6788,
    6803,
    6790,
    6791,
    6815,
    6799,
    6787,
    6787,
    6797,
    6788,
    6810,
    6779,
    6799,
    6788,
    6837,
    6793,
    6789,
    6785,
    6798,
    6797,
    6788,
    6795,
    6795,
    6802,
    6801,
    6806,
    6780,
    6784,
    6857,
    6804,
    6797,
    6905,
    6791,
    6783,
    6942,
    6798,
    6783,
    6780,
    6895,
    6789,
    6788,
    6797,
    6789,
    6794,
    6790,
    6812,
    6787,
    6797,
    6770,
    6787,
    6787,
    6787,
    6793,
    6784,
    6780,
    6777,
    6790,
    6794,
    6784,
    6795,
    6797,
    6792,
    6784,
    6801,
    6787,
    6781,
    6798,
    6777,
    6815,
    6793,
    6798,
    6788,
    6877,
    6796,
    6790,
    6796,
    6784,
    6803,
    6863,
    6791,
    6792,
    6805,
    6806,
    6785,
    6775,
    6797,
    6785,
    6807,
    6830,
    6785,
    6788,
    6792,
    6773,
    6785,
    6795,
    6785,
    6801,
    6792,
    6892,
    6802,
    6786,
    6808,
    6785,
    6799,
    6796,
    6798,
    6799,
    6786,
    6846,
    6775,
    6776,
    6797,
    6785,
    6786,
    6783,
    6789,
    6792,
    6791,
    6777,
    6787,
    6783,
    6790,
    6788,
    6784,
    6791,
    6774,
    6794,
    6785,
    6784,
    6781,
    6792,
    6797,
    6785,
    6810,
    6792,
    6780,
    6780,
    6795,
    6780,
    6852,
    6781,
    6778,
    6785,
    6828,
    6771,
    6790,
    6785,
    6775,
    6748,
    6776,
    6774,
    6778,
    6834,
    6790,
    6782,
    6797,
    6786,
    6794,
    6792,
    6781,
    6790,
    6793,
    6786,
    6896,
    6782,
    6790,
    6792,
    6790,
    6784,
    6786,
    6793,
    6783,
    6781,
    6779,
    6774,
    6789,
    6792,
    6796,
    6779,
    6782,
    6787,
    6797,
    6780,
    6791,
    6780,
    6787,
    6780,
    6787,
    6782,
    6792,
    6789,
    6778,
    6786,
    6780,
    6787,
    6790,
    6780,
    6780,
    6786,
    6792,
    6832,
    6778,
    6784,
    6789,
    6786,
    6788,
    6779,
    6850,
    6787,
    6779,
    6782,
    6828,
    6789,
    6789,
    6778,
    6792,
    6793,
    6789,
    6746,
    6786,
    6783,
    6793,
    6755,
    6789,
    6785,
    6777,
    6787,
    6783,
    6794,
    6880,
    6786,
    6790,
    6914,
    6789,
    6795,
    6792,
    6795,
    6787,
    6792,
    6778,
    6775,
    6774,
    6789,
    6791,
    6782,
    6776,
    6780,
    6775,
    6786,
    6794,
    6786,
    6791,
    6785,
    6770,
    6783,
    6773,
    6777,
    6782,
    6779,
    6780,
    6782,
    6781,
    6798,
    6784,
    6794,
    6804,
    6791,
    6777,
    6801,
    6790,
    6792,
    6893,
    6773,
    6781,
    6771,
    6773,
    6790,
    6791,
    6782,
    6784,
    6780,
    6775,
    6777,
    6797,
    6742,
    6798,
    6790,
    6785,
    6801,
    6779,
    6777,
    6857,
    6771,
    6784,
    6895,
    6783,
    6788,
    6788,
    6786,
    6776,
    6777,
    6880,
    6790,
    6780,
    6813,
    6782,
    6787,
    6786,
    6770,
    6776,
    6770,
    6779,
    6786,
    6772,
    6774,
    6787,
    6795,
    6783,
    6786,
    6780,
    6772,
    6782,
    6777,
    6778,
    6772,
    6788,
    6777,
    6779,
    6789,
    6777,
    6774,
    6782,
    6787,
    6789,
    6787,
    6789,
    6778,
    6782,
    6877,
    6778,
    6788,
    6773,
    6851,
    6780,
    6792,
    6776,
    6778,
    6775,
    6773,
    6814,
    6783,
    6788,
    6777,
    6770,
    6784,
    6787,
    6780,
    6790,
    6787,
    6777,
    6861,
    6777,
    6781,
    6783,
    6882,
    6780,
    6776,
    6778,
    6787,
    6790,
    6790,
    6877,
    6784,
    6779,
    6791,
    6777,
    6820,
    6782,
    6781,
    6774,
    6788,
    6782,
    6780,
    6784,
    6779,
    6786,
    6783,
    6766,
    6783,
    6779,
    6773,
    6778,
    6782,
    6764,
    6775,
    6784,
    6777,
    6779,
    6783,
    6779,
    6790,
    6774,
    6779,
    6789,
    6776,
    6774,
    6782,
    6835,
    6790,
    6781,
    6778,
    6873,
    6784,
    6781,
    6774,
    6784,
    6779,
    6790,
    6781,
    6780,
    6777,
    6836,
    6800,
    6776,
    6791,
    6772,
    6781,
    6776,
    6786,
    6778,
    6782,
    6777,
    6827,
    6781,
    6783,
    6770,
    6773,
    6775,
    6774,
    6771,
    6822,
    6774,
    6776,
    6781,
    6825,
    6784,
    6770,
    6791,
    6784,
    6779,
    6778,
    6819,
    6781,
    6768,
    6770,
    6775,
    6764,
    6770,
    6773,
    6789,
    6768,
    6785,
    6777,
    6769,
    6786,
    6792,
    6780,
    6766,
    6784,
    6767,
    6776,
    6778,
    6784,
    6782,
    6792,
    6782,
    6789,
    6777,
    6782,
    6770,
    6773,
    6779,
    6778,
    6776,
    6777,
    6775,
    6772,
    6763,
    6785,
    6782,
    6847,
    6789,
    6782,
    6776,
    6775,
    6781,
    6773,
    6772,
    6773,
    6769,
    6782,
    6772,
    6780,
    6771,
    6858,
    6782,
    6785,
    6771,
    6783,
    6779,
    6783,
    6772,
    6785,
    6774,
    6798,
    6767,
    6781,
    6783,
    6781,
    6780,
    6768,
    6777,
    6776,
    6771,
    6772,
    6780,
    6771,
    6763,
    6764,
    6777,
    6772,
    6782,
    6771,
    6773,
    6774,
    6773,
    6771,
    6773,
    6783,
    6776,
    6764,
    6767,
    6771,
    6769,
    6769,
    6778,
    6774,
    6771,
    6781,
    6779,
    6767,
    6785,
    6775,
    6777,
    6786,
    6766,
    6785,
    6769,
    6856,
    6756,
    6772,
    6767,
    6787,
    6763,
    6823,
    6791,
  ]);

  //-------- Digital filter application -----------//,

  SgFilter filter1 = new SgFilter(4, 11);

  var sgfiltered_RED = Array(filter1.smooth(sg_RED));
  var sgfiltered_IR = Array(filter1.smooth(sg_IR));

  // ------------------------------------IR signal processing------------------------
  var pk_IR = findtopPeaks(sgfiltered_IR, mindistance: 55);
  var troughs_IR = findlowtroughs(sgfiltered_IR, mindistance: 55);

  //fit a model that project pk_IR[0] to pk_IR[1]
  var u_x_IR = Array([]);
  var u_y_IR = Array([]);
  var l_x_IR = Array([]);
  var l_y_IR = Array([]);

  u_x_IR.add(0); //force u contains the last point of the filtered signal
  u_y_IR.add(sgfiltered_IR.first); //
  u_x_IR.addAll(pk_IR[0]);
  u_y_IR.addAll(pk_IR[1]);
  u_x_IR.add(sgfiltered_IR.length -
      1.0); //force u contains the last point of the filtered signal
  u_y_IR.add(sgfiltered_IR.last); //

  l_x_IR.add(0); //force u contains the last point of the filtered signal
  l_y_IR.add(sgfiltered_IR.first); //
  l_x_IR.addAll(troughs_IR[0]);
  l_y_IR.addAll(troughs_IR[1]);
  l_x_IR.add(sgfiltered_IR.length -
      1.0); //force u contains the last point of the filtered signal
  l_y_IR.add(sgfiltered_IR.last); //

  var q_u_IR = []; // the model for upper bound of IR signal
  var q_l_IR = []; // the model for lower bound of IR signal
  for (var k = 0; k < u_x_IR.length - 1; k++) {
    q_u_IR.addAll(
        linear_interp(u_x_IR[k], u_y_IR[k], u_x_IR[k + 1], u_y_IR[k + 1]));
  }
  for (var k = 0; k < l_x_IR.length - 1; k++) {
    q_l_IR.addAll(
        linear_interp(l_x_IR[k], l_y_IR[k], l_x_IR[k + 1], l_y_IR[k + 1]));
  }

  //print('---q_l_IR----');
  //print(q_l);
  //print('---q_u_IR----');
  // print(q_u_IR);
  // ------------------------------------RED signal processing------------------------
  var pk_RED = findtopPeaks(sgfiltered_RED, mindistance: 55);
  var troughs_RED = findlowtroughs(sgfiltered_RED, mindistance: 55);

  //fit a model that project pk_RED[0] to pk_RED[1]
  var u_x_RED = Array([]);
  var u_y_RED = Array([]);
  var l_x_RED = Array([]);
  var l_y_RED = Array([]);

  u_x_RED.add(0); //force u contains the last point of the filtered signal
  u_y_RED.add(sgfiltered_RED.first); //
  u_x_RED.addAll(pk_RED[0]);
  u_y_RED.addAll(pk_RED[1]);
  u_x_RED.add(sgfiltered_RED.length -
      1.0); //force u contains the last point of the filtered signal
  u_y_RED.add(sgfiltered_RED.last); //

  l_x_RED.add(0); //force u contains the last point of the filtered signal
  l_y_RED.add(sgfiltered_RED.first); //
  l_x_RED.addAll(troughs_RED[0]);
  l_y_RED.addAll(troughs_RED[1]);
  l_x_RED.add(sgfiltered_RED.length -
      1.0); //force u contains the last point of the filtered signal
  l_y_RED.add(sgfiltered_RED.last); //

  var q_u_RED = []; // the model for upper bound of IR signal
  var q_l_RED = []; // the model for lower bound of IR signal
  for (var k = 0; k < u_x_RED.length - 1; k++) {
    q_u_RED.addAll(
        linear_interp(u_x_RED[k], u_y_RED[k], u_x_RED[k + 1], u_y_RED[k + 1]));
  }
  for (var k = 0; k < l_x_RED.length - 1; k++) {
    q_l_RED.addAll(
        linear_interp(l_x_RED[k], l_y_RED[k], l_x_RED[k + 1], l_y_RED[k + 1]));
  }
//-----------------------------------calculate parameters for RR and SPO2 ----------------------------------------------
  var pp_RED =
      new Array(Array(q_u_RED.cast<double>()) - Array(q_l_RED.cast<double>()));
  var pp_IR =
      new Array(Array(q_u_IR.cast<double>()) - Array(q_l_IR.cast<double>()));

  SgFilter filter2 = new SgFilter(4, 11);

  pp_RED = Array(filter2.smooth(pp_RED));

  pp_IR = Array(filter2.smooth(pp_IR));
  print(sgfiltered_RED.length);
  //--------------------------------calculate RR------------------------------------------------
  var RR = (pp_RED / Array(q_l_RED.cast<double>())) /
      (pp_IR / Array(q_l_IR.cast<double>()));

  //---------------------------calculate SPO2------------------------------
  //SPO2=(-45.060*RR.^2)+30.354*RR+94.84;
  var SPO2 = Array.empty();
  SPO2 = arraySubToScalar(
      arrayMultiplyToScalar(arrayPow(RR, 2.0), -45.06) +
          arrayMultiplyToScalar(RR, 30.354),
      -94.84);

  print(SPO2);
}
