import 'package:scidart/numdart.dart';
import 'package:scidart/scidart.dart';
import 'package:linalg/linalg.dart';
import 'dart:math';

class SgFilter {
  int _order;
  int _frameLength;
  int _size;
  Matrix _kernel;

  /// The constructor for SgFilter
  /// Arguments:
  ///   - _order: int, the order of polynomial.
  ///   - _frameLength: int, the windows size for smoothing.
  /// Return:
  ///   - SgFilter
  SgFilter(this._order, this._frameLength) {
    _size = _frameLength ~/ 2;
    _kernel = this._buildKernel();
  }

  /// Build the kernel for smoothing
  /// Arguments:
  ///   - void
  /// Return:
  ///   - Matrix: the kernel for smoothing
  Matrix _buildKernel() {
    List<double> baseSeq = [];
    List<List<double>> tempMatrix = [];
    Matrix matrix;
    Matrix kernel;

    // construct base sequence
    for (int i = -_size; i <= _size; i++) {
      baseSeq.add(i.toDouble());
    }

    // fill the tempMatrix
    for (int i = 0; i < _order; i++) {
      List<double> tempSeq = [];

      // make row
      for (double val in baseSeq) {
        tempSeq.add(pow(val, i));
      }

      // add row
      tempMatrix.add(tempSeq);
    }

    // convert List<List<double>> to Matrix
    matrix = new Matrix(tempMatrix).transpose();

    // Calculate the kernel
    kernel =
        matrix * (matrix.transpose() * matrix).inverse() * matrix.transpose();

    return kernel;
  }

  /// Smooth given data
  /// Arguments:
  ///   - x: List<dynamic>, input data, only support int/double type.
  /// Return:
  ///   - List<dynamic>: Data after smoothing
  /// Throws:
  ///   - FormatException:
  ///      - if the data type is neither int nor double.
  ///      - Or the input length < _frameLength
  List<dynamic> smooth(List<dynamic> x) {
    List<double> dataAfterSmooth = [];
    List<double> inputData = [];

    // validate input data
    if (x.length < _frameLength) {
      throw FormatException(
          "The length of input must be >= _frameLength. (_frameLength=$_frameLength; input=${x.length})");
    }
    if (x[0].runtimeType != 0.runtimeType &&
        x[0].runtimeType != 1.0.runtimeType) {
      throw FormatException(
          "Only support int/double, get: ${x[0].runtimeType}!");
    }

    // convert List<int> to List<double> if needed
    if (x[0].runtimeType == 0.runtimeType) {
      for (int val in x) {
        inputData.add(val * 1.0);
      }
    } else {
      inputData = x;
    }

    // add padding
    // adding padding in the front
    for (int i = 0; i < _size; i++) {
      inputData.insert(0, 1);
    }

    // adding padding at the end
    for (int i = 0; i < _size; i++) {
      inputData.add(1);
    }

    // smoothing input data
    for (int i = _size; i < inputData.length - _size; i++) {
      List<List<double>> tempWin = [
        inputData.sublist(i - _size, i + _size + 1)
      ];
      Matrix windowX = new Matrix(tempWin).transpose();
      dataAfterSmooth.add((_kernel * windowX)[_size][0]);
    }

    return dataAfterSmooth;
  }

  /// getters
  int get order {
    return _order;
  }

  int get frameLength {
    return _frameLength;
  }

  Matrix get kernel {
    return _kernel;
  }
}

List linear_interp(double x1, double y1, double x2, double y2) {
  if (x1 > x2) {
    // keep x1 smaller than x2.
    var t;
    t = x1;
    x1 = x2;
    x2 = t;

    t = y1;
    y1 = y2;
    y2 = t;
  }
  var N = x2 - x1;
  var x;
  var y;
  Array result_y = Array.empty(); //
  for (int i = 0; i < N; i++) {
    x = x1 + i;
    y = (x - x1) * (y2 - y1) / (x2 - x1) + y1;
    result_y.add(y);
  }
  return result_y;
} //

List findtopPeaks(Array a, {double mindistance}) {
  //modify from scidart.findPeaks
  var N = a.length - 2;
  Array ix = Array.empty(); //ix -- index
  Array ax = Array.empty(); // ax -- value
  ix.add(0);
  ax.add(0);
  if (mindistance != null) {
    for (int i = 1; i <= N; i++) {
      if (a[i - 1] <= a[i] && a[i] >= a[i + 1]) {
        if (i - ix.last > mindistance) {
          //mindistance between two peaks
          ix.add(i.toDouble());
          ax.add(a[i]);
        }
      }
    }
  } else {
    for (int i = 1; i <= N; i++) {
      if (a[i - 1] <= a[i] && a[i] >= a[i + 1]) {
        ix.add(i.toDouble());
        ax.add(a[i]);
      }
    }
  }
  ix.remove(0);
  ax.remove(0);
  return [ix, ax];
}

List findlowtroughs(Array a, {double mindistance}) {
  //modify from scidart.findPeaks
  var N = a.length - 2;
  Array ix = Array.empty(); //ix -- index
  Array ax = Array.empty(); // ax -- value
  ix.add(0);
  ax.add(0);
  if (mindistance != null) {
    for (int i = 1; i <= N; i++) {
      if (a[i - 1] >= a[i] && a[i] <= a[i + 1]) {
        if (i - ix.last > mindistance) {
          //mindistance between two peaks
          ix.add(i.toDouble());
          ax.add(a[i]);
        }
      }
    }
  } else {
    for (int i = 1; i <= N; i++) {
      if (a[i - 1] >= a[i] && a[i] <= a[i + 1]) {
        ix.add(i.toDouble());
        ax.add(a[i]);
      }
    }
  }
  ix.remove(0);
  ax.remove(0);
  return [ix, ax];
}

void main() {
  // load RED data
  var IR = Array([
    13079,
    13080,
    13117,
    13047,
    13069,
    13041,
    13044,
    13035,
    13027,
    13027,
    13037,
    13078,
    12999,
    12978,
    13039,
    13058,
    13010,
    13001,
    13032,
    13039,
    13002,
    13019,
    13010,
    12987,
    13030,
    13015,
    12994,
    13068,
    13050,
    13048,
    13028,
    13044,
    13047,
    13063,
    13056,
    13048,
    13079,
    13061,
    13029,
    13052,
    13070,
    13053,
    13075,
    13080,
    13066,
    13064,
    13086,
    13035,
    13036,
    13074,
    13048,
    13028,
    13119,
    13077,
    13083,
    13040,
    13054,
    13136,
    13047,
    13054,
    13072,
    13071,
    13081,
    13067,
    13068,
    13023,
    13054,
    13046,
    13065,
    13076,
    13049,
    13071,
    13056,
    13056,
    13057,
    13033,
    13051,
    13061,
    13061,
    13051,
    13062,
    13058,
    13062,
    13051,
    13040,
    13035,
    13063,
    13044,
    13051,
    13057,
    13052,
    13040,
    13053,
    13044,
    13049,
    13056,
    13065,
    13054,
    13055,
    13042,
    13050,
    13059,
    13043,
    13041,
    13039,
    13141,
    13056,
    13049,
    13044,
    13063,
    13122,
    13033,
    13047,
    13068,
    13052,
    13060,
    13048,
    13054,
    13057,
    13028,
    13040,
    13034,
    13042,
    13047,
    13086,
    13053,
    13037,
    13069,
    13090,
    13041,
    13042,
    13048,
    13046,
    13056,
    13042,
    13042,
    13059,
    13045,
    13048,
    13035,
    13095,
    13041,
    13057,
    13058,
    13041,
    13036,
    13047,
    13046,
    13060,
    13039,
    13047,
    13043,
    13038,
    13052,
    13042,
    13043,
    13024,
    13052,
    13037,
    13033,
    13035,
    13036,
    13051,
    13038,
    13042,
    13035,
    13031,
    13039,
    13047,
    13061,
    13031,
    13059,
    13045,
    13035,
    13028,
    13044,
    13043,
    13033,
    13029,
    13053,
    13025,
    13051,
    13044,
    13039,
    13042,
    13047,
    13033,
    13038,
    13049,
    13044,
    13029,
    13032,
    13032,
    13030,
    13036,
    13029,
    13028,
    13037,
    13023,
    13090,
    13034,
    13038,
    13041,
    13030,
    13026,
    13035,
    13051,
    13028,
    13024,
    13021,
    13020,
    13022,
    13011,
    13015,
    13053,
    13037,
    13000,
    13048,
    13023,
    13025,
    13034,
    13017,
    13047,
    13009,
    13025,
    12976,
    13032,
    13034,
    13066,
    12991,
    13025,
    13016,
    12995,
    13067,
    13008,
    13056,
    13123,
    13061,
    13034,
    13042,
    13028,
    13024,
    13005,
    13036,
    13025,
    13036,
    13015,
    13014,
    13064,
    13021,
    13004,
    13015,
    13055,
    13019,
    13019,
    12984,
    13005,
    13008,
    13001,
    13003,
    13002,
    13016,
    12989,
    13009,
    13015,
    13072,
    13008,
    13033,
    13006,
    12987,
    13012,
    13011,
    13000,
    13000,
    12961,
    13005,
    13016,
    12989,
    12993,
    12993,
    12979,
    12995,
    12984,
    13008,
    13053,
    12980,
    12985,
    13064,
    13277,
    12898,
    13067,
    12918,
    12982,
    12949,
    13032,
    12976,
    13035,
    12942,
    12983,
    13003,
    12959,
    12979,
    12995,
    12974,
    13018,
    13001,
    12996,
    12987,
    12988,
    13007,
    13000,
    12985,
    12982,
    12982,
    12991,
    12988,
    13004,
    13004,
    12978,
    13015,
    12987,
    13054,
    13108,
    12978,
    12978,
    13040,
    12966,
    12975,
    13030,
    13007,
    12988,
    12978,
    13007,
    12995,
    12971,
    12986,
    12979,
    12975,
    13026,
    13004,
    12978,
    13015,
    12994,
    12976,
    12967,
    13232,
    13036,
    13069,
    12908,
    13040,
    12988,
    12988,
    12960,
    13009,
    13004,
    12970,
    13026,
    13016,
    13012,
    12983,
    12994,
    13001,
    13003,
    13001,
    12984,
    12992,
    12998,
    12981,
    12969,
    12983,
    12990,
    13027,
    12991,
    12987,
    12970,
    13007,
    12913,
    12994,
    13027,
    12988,
    12981,
    13000,
    12999,
    12992,
    12973,
    12987,
    13099,
    12980,
    12989,
    12991,
    12981,
    13004,
    12990,
    12981,
    13004,
    12968,
    12973,
    12997,
    12987,
    13001,
    12976,
    12978,
    12970,
    12984,
    13007,
    12992,
    12982,
    12998,
    12962,
    12933,
    12974,
    12962,
    12977,
    12970,
    12982,
    12988,
    13058,
    12972,
    12979,
    12977,
    13017,
    12971,
    12988,
    12970,
    12956,
    12980,
    12980,
    12982,
    12981,
    12973,
    12974,
    12968,
    12981,
    12964,
    12986,
    13064,
    12980,
    12973,
    12974,
    12976,
    12985,
    12976,
    12980,
    12970,
    12970,
    12986,
    12981,
    12962,
    12980,
    12978,
    13021,
    13009,
    12958,
    12975,
    12957,
    12985,
    12969,
    12981,
    12955,
    12968,
    12979,
    12960,
    12966,
    12970,
    13060,
    12962,
    12977,
    12957,
    12980,
    12973,
    12964,
    12965,
    12955,
    12974,
    12957,
    12966,
    12986,
    12980,
    12990,
    12973,
    12953,
    12983,
    12970,
    12984,
    12922,
    12943,
    12937,
    12959,
    12946,
    12937,
    12932,
    12895,
    12888,
    12888,
    12823,
    12920,
    12809,
    12996,
    12846,
    12956,
    12863,
    12897,
    12845,
    12836,
    12851,
    12903,
    12895,
    12809,
    12885,
    12878,
    12896,
    12922,
    12907,
    12926,
    12916,
    12928,
    12946,
    12917,
    12961,
    12941,
    12941,
    12943,
    12954,
    12939,
    12969,
    12939,
    12970,
    12949,
    12952,
    12950,
    12893,
    12935,
    12948,
    12958,
    12941,
    12975,
    12955,
    12954,
    12947,
    12947,
    12958,
    12962,
    12940,
    13066,
    12932,
    12944,
    12924,
    12941,
    12913,
    12941,
    12948,
    12947,
    12950,
    12941,
    12935,
    12972,
    12953,
    13029,
    12936,
    12950,
    12929,
    12991,
    12959,
    12939,
    12946,
    12972,
    12970,
    12950,
    12967,
    12937,
    12926,
    12943,
    12946,
    12945,
    13002,
    12940,
    12968,
    12962,
    13022,
    12942,
    12946,
    12961,
    12886,
    12930,
    12947,
    12936,
    12946,
    12970,
    12965,
    12972,
    13019,
    12946,
    12941,
    12972,
    12949,
    12919,
    12960,
    12932,
    12915,
    12955,
    12949,
    12943,
    12962,
    12948,
    12954,
    12943,
    12945,
    12947,
    12946,
    12942,
    12932,
    12952,
    12938,
    12928,
    12920,
    12933,
    12936,
    12943,
    12982,
    12936,
    12923,
    12960,
    12950,
    12933,
    12949,
    12948,
    12916,
    12956,
    12930,
    12926,
    12931,
    12917,
    12937,
    12936,
    12924,
    12901,
    12934,
    12922,
    12933,
    12942,
    12915,
    12963,
    12915,
    12940,
    12957,
    12936,
    12920,
    12937,
    12966,
    12934,
    12961,
    12923,
    12926,
    12920,
    12950,
    12919,
    12910,
    12952,
    12939,
    12888,
    12944,
    12930,
    12926,
    12931,
    12961,
    12914,
    12920,
    12980,
    12935,
    12915,
    12927,
    12901,
    12924,
    12917,
    12918,
    12890,
    12887,
    12909,
    12877,
    12885,
    12865,
    12956,
    12882,
    12802,
    12890,
    12928,
    12936,
    12904,
    12906,
    12916,
    12921,
    13017,
    12919,
    12902,
    12911,
    12828,
    12915,
    12905,
    12917,
    12930,
    12909,
    12925,
    12909,
    12983,
    12892,
    12931,
    12972,
    12937,
    12917,
    12926,
    12921,
    12897,
    12921,
    12920,
    12913,
    12916,
    12906,
    12922,
    12909,
    12927,
    12928,
    12929,
    12920,
    12902,
    12924,
    12902,
    12919,
    12892,
    12918,
    12905,
    12915,
    12903,
    12913,
    12961,
    12894,
    12907,
    12922,
    12906,
    12918,
    12928,
    12924,
    12906,
    12916,
    12919,
    12969,
    12879,
    12899,
    12905,
    12891,
    12915,
    12877,
    12898,
    12883,
    12894,
    12895,
    12900,
    12908,
    12904,
    12955,
    12910,
    12905,
    12897,
    12907,
    12911,
    12892,
    12896,
    12892,
    12878,
    12895,
    12884,
    12911,
    12904,
    12891,
    12949,
    12876,
    12888,
    12894,
    12910,
    12870,
    12873,
    12876,
    12906,
    12901,
    12926,
    12907,
    12904,
    12914,
    12880,
    12974,
    12904,
    12900,
    12902,
    12914,
    12868,
    12894,
    12916,
    12917,
    12889,
    12880,
    12902,
    12888,
    12866,
    12863,
    12885,
    12846,
    12889,
    12852,
    12828,
    12868,
    12844,
    12871,
    12890,
    12872,
    12872,
    12842,
    12880,
    12859,
    12927,
    12895,
    12887,
    12872,
    12890,
    12881,
    12879,
    12868,
    12914,
    12887,
    12907,
    12902,
    12936,
    12863,
    12875,
    12894,
    12896,
    12905,
    12908,
    12899,
    12901,
    12909,
    12915,
    12915,
    12916,
    12893,
    12904,
    12963,
    12882,
    12965,
    12883,
    12923,
    12855,
    12884,
    12896,
    12906,
    12880,
    12897,
    12887,
    12908,
    12893,
    12971,
    12879,
    12876,
    12887,
    12896,
    12893,
    12895,
    12896,
    12892,
    12914,
    12896,
    12927,
    12896,
    12929,
    12897,
    12907,
    12876,
    12886,
    12882,
    12898,
    12885,
    12893,
    12900,
    12899,
    12906,
    12894,
    12903,
    12898,
    12896,
    12881,
    12914,
    12910,
    12909,
    12906,
    12906,
    12908,
    12913,
    12902,
    12923,
    12893,
    12901,
    12903,
    12981,
    12913,
    12900,
    12912,
    12908,
    12902,
    12900,
    12905,
    12885,
    12889,
    12887,
    12899,
    12903,
    12894,
    12891,
    12891,
    12904,
    12904,
    12887,
    12854,
    12899,
    12897,
    12887,
    12957,
    12897,
    12901,
    12887,
    12901,
    12900,
    12890,
    12895,
    12890,
    12889,
    12902,
    12905,
    12885,
    12897,
    12903,
    12899,
    12909,
    12884,
    12884,
    12902,
    12901,
    12894,
    12887,
    12890,
    12900,
    12880,
    12899,
    12879,
    12907,
    12918,
    12884,
    12898,
    12896,
    12871,
    12903,
    12898,
    12900,
    12865,
    12885,
    12881,
    12881,
    12889,
    12880,
    12866,
    12938,
    12875,
    12871,
    12863,
    12888,
    12886,
    12860,
    12860,
    12838,
    12871,
    12867,
    12842,
    12833,
    12845,
    12852,
    12868,
    12857,
    12861,
    12845,
    12875,
    12864,
    12820,
    12832,
    12889,
    12869,
    12863,
    12872,
    12875,
    12878,
    12874,
    12802,
    12894,
    12896,
    12902,
  ]);
  var RED = Array([
    51746,
    51740,
    51708,
    51810,
    51734,
    51724,
    51701,
    51696,
    51698,
    51706,
    51716,
    51657,
    51681,
    51681,
    51712,
    51687,
    51691,
    51694,
    51690,
    51718,
    51713,
    51708,
    51703,
    51700,
    51707,
    51747,
    51687,
    51702,
    51717,
    51654,
    51721,
    51733,
    51727,
    51741,
    51831,
    51726,
    51748,
    51735,
    51697,
    51632,
    51723,
    51736,
    51734,
    51728,
    51738,
    51731,
    51685,
    51729,
    51719,
    51724,
    51737,
    51721,
    51757,
    51736,
    51735,
    51721,
    51723,
    51692,
    51728,
    51750,
    51736,
    51739,
    51814,
    51720,
    51731,
    51764,
    51778,
    51723,
    51738,
    51731,
    51723,
    51786,
    51743,
    51722,
    51722,
    51715,
    51724,
    51728,
    51726,
    51712,
    51719,
    51724,
    51716,
    51715,
    51717,
    51725,
    51710,
    51723,
    51725,
    51706,
    51735,
    51712,
    51729,
    51720,
    51722,
    51724,
    51738,
    51741,
    51706,
    51734,
    51707,
    51719,
    51718,
    51719,
    51714,
    51738,
    51732,
    51713,
    51725,
    51741,
    51628,
    51818,
    51702,
    51736,
    51757,
    51720,
    51697,
    51726,
    51710,
    51732,
    51709,
    51710,
    51713,
    51709,
    51609,
    51717,
    51713,
    51712,
    51660,
    51775,
    51710,
    51719,
    51699,
    51711,
    51669,
    51713,
    51720,
    51704,
    51713,
    51714,
    51740,
    51704,
    51704,
    51710,
    51707,
    51776,
    51713,
    51720,
    51724,
    51771,
    51699,
    51716,
    51705,
    51710,
    51677,
    51696,
    51711,
    51708,
    51703,
    51723,
    51708,
    51765,
    51720,
    51697,
    51702,
    51687,
    51700,
    51706,
    51705,
    51708,
    51729,
    51682,
    51700,
    51597,
    51697,
    51710,
    51725,
    51786,
    51697,
    51710,
    51704,
    51680,
    51708,
    51694,
    51692,
    51693,
    51705,
    51715,
    51708,
    51687,
    51697,
    51692,
    51752,
    51703,
    51707,
    51700,
    51701,
    51720,
    51707,
    51566,
    51707,
    51704,
    51828,
    51680,
    51687,
    51685,
    51763,
    51689,
    51688,
    51690,
    51695,
    51698,
    51679,
    51705,
    51714,
    51709,
    51686,
    51684,
    51681,
    51679,
    51682,
    51662,
    51663,
    51689,
    51691,
    51712,
    51715,
    51690,
    51723,
    51680,
    51691,
    51683,
    51690,
    51723,
    51677,
    51708,
    51596,
    51700,
    51707,
    51753,
    51710,
    51689,
    51691,
    51691,
    51687,
    51685,
    51690,
    51692,
    51714,
    51682,
    51673,
    51684,
    51626,
    51711,
    51688,
    51706,
    51742,
    51678,
    51660,
    51668,
    51693,
    51679,
    51668,
    51674,
    51679,
    51653,
    51687,
    51680,
    51695,
    51689,
    51774,
    51677,
    51672,
    51667,
    51730,
    51739,
    51667,
    51669,
    51660,
    51658,
    51670,
    51674,
    51667,
    51674,
    51571,
    51674,
    51672,
    51672,
    52015,
    51609,
    51734,
    51639,
    51679,
    51637,
    51681,
    51677,
    51711,
    51655,
    51663,
    51684,
    51632,
    51667,
    51678,
    51656,
    51707,
    51694,
    51681,
    51661,
    51684,
    51675,
    51665,
    51672,
    51683,
    51663,
    51677,
    51666,
    51785,
    51671,
    51672,
    51686,
    51672,
    51735,
    51700,
    51657,
    51645,
    51708,
    51636,
    51652,
    51693,
    51731,
    51708,
    51672,
    51676,
    51670,
    51656,
    51669,
    51665,
    51667,
    51687,
    51679,
    51667,
    51686,
    51667,
    51755,
    51664,
    51820,
    51698,
    51805,
    51591,
    51699,
    51674,
    51667,
    51634,
    51725,
    51678,
    51634,
    51685,
    51685,
    51693,
    51674,
    51671,
    51674,
    51727,
    51664,
    51661,
    51671,
    51654,
    51670,
    51650,
    51666,
    51671,
    51618,
    51677,
    51685,
    51673,
    51670,
    51651,
    51673,
    51711,
    51680,
    51676,
    51681,
    51662,
    51668,
    51656,
    51659,
    51561,
    51660,
    51658,
    51687,
    51661,
    51710,
    51753,
    51655,
    51674,
    51663,
    51650,
    51673,
    51669,
    51655,
    51663,
    51666,
    51654,
    51663,
    51636,
    51679,
    51648,
    51660,
    51659,
    51692,
    51713,
    51661,
    51651,
    51641,
    51655,
    51662,
    51629,
    51662,
    51648,
    51632,
    51650,
    51723,
    51659,
    51662,
    51703,
    51687,
    51655,
    51645,
    51659,
    51648,
    51693,
    51658,
    51654,
    51657,
    51653,
    51571,
    51659,
    51658,
    51796,
    51636,
    51658,
    51650,
    51655,
    51653,
    51658,
    51642,
    51670,
    51639,
    51646,
    51647,
    51584,
    51678,
    51646,
    51663,
    51637,
    51659,
    51642,
    51642,
    51645,
    51673,
    51655,
    51652,
    51643,
    51666,
    51600,
    51643,
    51662,
    51646,
    51638,
    51701,
    51715,
    51645,
    51645,
    51647,
    51650,
    51703,
    51651,
    51651,
    51666,
    51658,
    51627,
    51680,
    51637,
    51632,
    51623,
    51634,
    51616,
    51636,
    51634,
    51624,
    51616,
    51577,
    51592,
    51582,
    51545,
    51588,
    51522,
    51663,
    51542,
    51659,
    51566,
    51589,
    51554,
    51498,
    51614,
    51568,
    51675,
    51489,
    51558,
    51581,
    51572,
    51649,
    51615,
    51606,
    51626,
    51629,
    51646,
    51631,
    51646,
    51621,
    51723,
    51625,
    51643,
    51599,
    51664,
    51632,
    51605,
    51647,
    51632,
    51639,
    51607,
    51657,
    51622,
    51633,
    51629,
    51668,
    51719,
    51650,
    51641,
    51657,
    51628,
    51640,
    51646,
    51553,
    51637,
    51616,
    51621,
    51628,
    51650,
    51617,
    51625,
    51634,
    51641,
    51629,
    51648,
    51646,
    51639,
    51610,
    51632,
    51663,
    51620,
    51666,
    51629,
    51636,
    51645,
    51647,
    51666,
    51636,
    51630,
    51644,
    51614,
    51703,
    51627,
    51621,
    51624,
    51647,
    51640,
    51650,
    51560,
    51634,
    51628,
    51641,
    51634,
    51626,
    51615,
    51645,
    51614,
    51641,
    51654,
    51649,
    51561,
    51621,
    51614,
    51640,
    51630,
    51586,
    51682,
    51643,
    51611,
    51695,
    51674,
    51643,
    51631,
    51625,
    51670,
    51639,
    51624,
    51629,
    51627,
    51641,
    51629,
    51633,
    51621,
    51614,
    51602,
    51613,
    51633,
    51624,
    51572,
    51627,
    51612,
    51626,
    51638,
    51640,
    51636,
    51636,
    51604,
    51631,
    51631,
    51660,
    51635,
    51622,
    51632,
    51672,
    51611,
    51617,
    51619,
    51626,
    51644,
    51623,
    51621,
    51557,
    51601,
    51615,
    51640,
    51634,
    51597,
    51622,
    51627,
    51631,
    51644,
    51623,
    51610,
    51615,
    51641,
    51612,
    51589,
    51564,
    51688,
    51663,
    51595,
    51630,
    51623,
    51623,
    51657,
    51610,
    51607,
    51557,
    51627,
    51607,
    51614,
    51609,
    51618,
    51596,
    51612,
    51595,
    51586,
    51607,
    51576,
    51577,
    51559,
    51499,
    51570,
    51552,
    51595,
    51607,
    51652,
    51609,
    51599,
    51611,
    51608,
    51548,
    51609,
    51607,
    51602,
    51628,
    51604,
    51611,
    51604,
    51535,
    51595,
    51615,
    51597,
    51661,
    51624,
    51617,
    51610,
    51625,
    51615,
    51608,
    51624,
    51643,
    51611,
    51621,
    51615,
    51598,
    51601,
    51623,
    51612,
    51615,
    51589,
    51617,
    51623,
    51614,
    51613,
    51590,
    51603,
    51592,
    51597,
    51588,
    51606,
    51590,
    51623,
    51576,
    51611,
    51590,
    51617,
    51606,
    51590,
    51605,
    51607,
    51599,
    51598,
    51594,
    51593,
    51583,
    51601,
    51600,
    51640,
    51602,
    51585,
    51571,
    51653,
    51569,
    51588,
    51583,
    51591,
    51588,
    51524,
    51609,
    51604,
    51605,
    51643,
    51616,
    51588,
    51600,
    51596,
    51589,
    51594,
    51603,
    51586,
    51606,
    51578,
    51623,
    51538,
    51635,
    51579,
    51599,
    51582,
    51583,
    51582,
    51601,
    51592,
    51654,
    51591,
    51598,
    51596,
    51589,
    51505,
    51600,
    51593,
    51589,
    51610,
    51584,
    51605,
    51600,
    51588,
    51604,
    51563,
    51590,
    51578,
    51575,
    51574,
    51569,
    51564,
    51555,
    51544,
    51554,
    51561,
    51570,
    51640,
    51593,
    51576,
    51556,
    51573,
    51572,
    51559,
    51523,
    51582,
    51573,
    51579,
    51579,
    51585,
    51667,
    51581,
    51586,
    51594,
    51584,
    51591,
    51636,
    51587,
    51592,
    51607,
    51590,
    51487,
    51610,
    51587,
    51652,
    51604,
    51595,
    51578,
    51609,
    51600,
    51615,
    51512,
    51569,
    51556,
    51690,
    51597,
    51631,
    51622,
    51591,
    51596,
    51581,
    51586,
    51601,
    51595,
    51585,
    51524,
    51586,
    51586,
    51595,
    51590,
    51608,
    51623,
    51587,
    51589,
    51585,
    51586,
    51606,
    51586,
    51544,
    51671,
    51602,
    51546,
    51577,
    51641,
    51588,
    51600,
    51596,
    51588,
    51587,
    51589,
    51599,
    51592,
    51591,
    51586,
    51586,
    51604,
    51604,
    51584,
    51629,
    51588,
    51585,
    51581,
    51605,
    51633,
    51597,
    51594,
    51585,
    51524,
    51588,
    51607,
    51602,
    51730,
    51592,
    51582,
    51574,
    51596,
    51593,
    51590,
    51608,
    51597,
    51586,
    51590,
    51591,
    51576,
    51609,
    51595,
    51599,
    51576,
    51582,
    51576,
    51578,
    51592,
    51585,
    51579,
    51642,
    51585,
    51576,
    51598,
    51608,
    51579,
    51585,
    51589,
    51568,
    51591,
    51573,
    51574,
    51595,
    51598,
    51581,
    51586,
    51589,
    51591,
    51616,
    51576,
    51527,
    51589,
    51610,
    51583,
    51591,
    51579,
    51611,
    51587,
    51599,
    51583,
    51653,
    51590,
    51583,
    51568,
    51576,
    51637,
    51573,
    51573,
    51577,
    51585,
    51511,
    51576,
    51565,
    51562,
    51673,
    51565,
    51577,
    51552,
    51554,
    51558,
    51561,
    51555,
    51552,
    51548,
    51559,
    51565,
    51553,
    51541,
    51564,
    51622,
    51558,
    51530,
    51551,
    51569,
    51569,
    51567,
    51570,
    51579,
    51558,
    51575,
    51574,
    51595,
    51572,
    51591
  ]);

  SgFilter filter1 = new SgFilter(4, 11);

  var sgfiltered_RED = Array(filter1.smooth(RED));
  var sgfiltered_IR = Array(filter1.smooth(IR));
  // ------------------------------------IR signal processing------------------------
  var pk_IR = findtopPeaks(sgfiltered_IR, mindistance: 55);
  var troughs_IR = findlowtroughs(sgfiltered_IR, mindistance: 55);

  //fit a model that project pk_IR[0] to pk_IR[1]
  var u_x_IR = Array([]);
  var u_y_IR = Array([]);
  var l_x_IR = Array([]);
  var l_y_IR = Array([]);

  u_x_IR.add(0); //force u contains the last point of the filtered signal
  u_y_IR.add(sgfiltered_IR.first); //
  u_x_IR.addAll(pk_IR[0]);
  u_y_IR.addAll(pk_IR[1]);
  u_x_IR.add(sgfiltered_IR.length -
      1.0); //force u contains the last point of the filtered signal
  u_y_IR.add(sgfiltered_IR.last); //

  l_x_IR.add(0); //force u contains the last point of the filtered signal
  l_y_IR.add(sgfiltered_IR.first); //
  l_x_IR.addAll(troughs_IR[0]);
  l_y_IR.addAll(troughs_IR[1]);
  l_x_IR.add(sgfiltered_IR.length -
      1.0); //force u contains the last point of the filtered signal
  l_y_IR.add(sgfiltered_IR.last); //

  var q_u_IR = []; // the model for upper bound of IR signal
  var q_l_IR = []; // the model for lower bound of IR signal
  for (var k = 0; k < u_x_IR.length - 1; k++) {
    q_u_IR.addAll(
        linear_interp(u_x_IR[k], u_y_IR[k], u_x_IR[k + 1], u_y_IR[k + 1]));
  }
  for (var k = 0; k < l_x_IR.length - 1; k++) {
    q_l_IR.addAll(
        linear_interp(l_x_IR[k], l_y_IR[k], l_x_IR[k + 1], l_y_IR[k + 1]));
  }

  //print('---q_l_IR----');
  //print(q_l);
  //print('---q_u_IR----');
  // print(q_u_IR);
  // ------------------------------------RED signal processing------------------------
  var pk_RED = findtopPeaks(sgfiltered_RED, mindistance: 55);
  var troughs_RED = findlowtroughs(sgfiltered_RED, mindistance: 55);

  //fit a model that project pk_RED[0] to pk_RED[1]
  var u_x_RED = Array([]);
  var u_y_RED = Array([]);
  var l_x_RED = Array([]);
  var l_y_RED = Array([]);

  u_x_RED.add(0); //force u contains the last point of the filtered signal
  u_y_RED.add(sgfiltered_RED.first); //
  u_x_RED.addAll(pk_RED[0]);
  u_y_RED.addAll(pk_RED[1]);
  u_x_RED.add(sgfiltered_RED.length -
      1.0); //force u contains the last point of the filtered signal
  u_y_RED.add(sgfiltered_RED.last); //

  l_x_RED.add(0); //force u contains the last point of the filtered signal
  l_y_RED.add(sgfiltered_RED.first); //
  l_x_RED.addAll(troughs_RED[0]);
  l_y_RED.addAll(troughs_RED[1]);
  l_x_RED.add(sgfiltered_RED.length -
      1.0); //force u contains the last point of the filtered signal
  l_y_RED.add(sgfiltered_RED.last); //

  var q_u_RED = []; // the model for upper bound of IR signal
  var q_l_RED = []; // the model for lower bound of IR signal
  for (var k = 0; k < u_x_RED.length - 1; k++) {
    q_u_RED.addAll(
        linear_interp(u_x_RED[k], u_y_RED[k], u_x_RED[k + 1], u_y_RED[k + 1]));
  }
  for (var k = 0; k < l_x_RED.length - 1; k++) {
    q_l_RED.addAll(
        linear_interp(l_x_RED[k], l_y_RED[k], l_x_RED[k + 1], l_y_RED[k + 1]));
  }
//-----------------------------------calculate parameters for RR and SPO2 ----------------------------------------------
  var pp_IR =
      new Array(Array(q_u_IR.cast<double>()) - Array(q_l_IR.cast<double>()));
  SgFilter filter2 = new SgFilter(4, 11);
  var smoothed_pp_IR = Array(filter2.smooth(pp_IR));
  var pk_PP_IR = findtopPeaks(smoothed_pp_IR, mindistance: 100);
  //print(smoothed_pp_IR);
  //print(pk_PP_IR[0]);
  //print(pk_PP_IR[1]);
  var collecting_frequency = 30;
  var Resp = pk_PP_IR[0].length; // record how many breathing in the whole time.
  var time = sgfiltered_IR.length /
      collecting_frequency /
      60; // record how many minutes in the data
  var Resp_per_minute = Resp / time;
  print(time);
  print(Resp);
  print(Resp_per_minute);
}
